#### Data Structure

vector<Dscalar2>

//!return a Dscalar2 from two Dscalars
HOSTDEVICE Dscalar2 make_Dscalar2(Dscalar x, Dscalar y)
    {
    Dscalar2 ans;
    ans.x =x;
    ans.y=y;
    return ans;
    }

//!component-wise addition of two Dscalar2s
HOSTDEVICE Dscalar2 operator+(const Dscalar2 &a, const Dscalar2 &b)
    {
    return make_Dscalar2(a.x+b.x,a.y+b.y);
    }
    
vector<Dscalar2> velocities(Ncells,make_Dscalar2(0.0,0.0));

vector<Dscalar2> answer;
answer.push_back(make_Dscalar2(rmin+0.5*binWidth,value));


#### Coding flow
main spv
-> VoronoiQuadraticEnergy::VoronoiQuadraticEnergy(int n,Dscalar A0, Dscalar P0,bool reprod)
-> VoronoiQuadraticEnergy::initializeVoronoiQuadraticEnergy(int n)
-> voronoiModelBase::initializeVoronoiModelBase(int n)
-> void Simple2DActiveCell::initializeSimple2DActiveCell(int n)
    //set circumcenter array size
    circumcenters.resize(2*(Ncells+10));
    NeighIdxs.resize(6*(Ncells+10));
        //DelaunayLoc initialization
    delLoc.setBox(Box);
    resetDelLocPoints();

    //make a full triangulation
    completeRetriangulationPerformed = 1;
    cellNeighborNum.resize(Ncells);
    globalTriangulationCGAL();
    resetLists();
    allDelSets();
    
    
    
    
     //1130
    int ni;
//    Dscalar x;
//    Dscalar y;
//    vector<Dscalar2> newCellPositions(Ncells);
//    Dscalar boxsize = sqrt((Dscalar)Ncells);
//    Box->setSquare(boxsize,boxsize);
//    for (int ni = 0; ni < Ncells; ++ni)
//        x = noise.getRealUniform(0.0,boxsize);
//        y = noise.getRealUniform(0.0,boxsize);
//        newCellPositions[ni] = make_Dscalar2(x,y);
//    setCellPositions(newCellPositions);
    //




void Simple2DActiveCell::initializeSimple2DActiveCell(int n)
-> Simple2DCell::initializeSimple2DCell(int n)
-> //setting cell positions randomly also auto-generates a square box with L = sqrt(Ncells)
    setCellPositionsRandomly();
    or 
    Simple2DCell::setCellPositions(vector<Dscalar2> newCellPositions)
